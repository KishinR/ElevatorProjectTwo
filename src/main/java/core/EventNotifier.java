package core;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;

/**
 * EventNotifier is the sibling class to the EventListener. This class will
 * send a UDP datagram containing a message in the form of a byte string
 * generated by the ElevatorMessage class. This class stores a port reference 
 * to the port it would like to communicate with, NOT the port it opens to 
 * send a message.
 */
public class EventNotifier {
	
	// -- INSTANCE VARIABLES -- //
	protected InetAddress localhost;
	int PORT;
	String name = "";
	
	// -- CONSTRUCTOR -- //
	public EventNotifier(int PORT, String name) {
		this.PORT = PORT;
		this.name = name;
		try {
			this.localhost = InetAddress.getLocalHost();
		} catch (UnknownHostException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
		
	/**
	 * Opens a new and temporary socket on any available port to
	 * send a datagram to the port stored in this class. This does
	 * not block or wait for a response, simply sends a notification.
	 * 
	 * @param msg the ElevatorMessage instance we want to send
	 */
	public void sendMessage(ElevatorMessage msg, String address) {
		try {
			// Constructs and opens a new packet/socket 
			
			DatagramSocket sendSocket = new DatagramSocket();
			
			
			//inter-computer communication
			DatagramPacket sendPacket = new DatagramPacket(msg.getBytes(), ElevatorMessage.SIZE, localhost, this.PORT);
			
			if(!address.equals("")) {
				
				InetAddress targetAddress = null;
				try {
					targetAddress = InetAddress.getByName(address);
				} catch (UnknownHostException e) {
					e.printStackTrace();
				}
				sendPacket = new DatagramPacket(msg.getBytes(), ElevatorMessage.SIZE, targetAddress, this.PORT);
			}
				
			
			System.out.print(name);
			System.out.println(": SENDING EVENT INFORMATION" + msg);
			try {
				// send the packet
				sendSocket.send(sendPacket);
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			// close the socket and return
			sendSocket.close();
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
